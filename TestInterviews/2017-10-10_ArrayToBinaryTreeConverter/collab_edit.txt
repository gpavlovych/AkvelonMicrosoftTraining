10.10.2017 11:00 EEST

http://collabedit.com/9dw2w

Notes for task:
1) Looking for object oriented design, break down by components, abstraction, etc
2) Design approach for production code
3) Unit-tests are necessary


Given a sorted (increasing order) array, write a program to create a binary tree with minimal height.

namespace TreeFromArray
{
    public class TreeNode
    {
        public TreeNode(int value)
        {
            this.Value = value;
        }
        
        public int Value {get;}
        
        public TreeNode Child1 {get;set;}
        
        public TreeNode Child2 {get;set;}
    }
    
    public static class Solver
    {
        public static TreeNode ConvertToTree(int [] array)
        {
            if (array == null)
            {
                throw new ArgumentNullException(nameof(array));
            }
            
            if (array.Length == 0)
            {
                return null;
            }
            
            var leftArrayLength = array.Length/2 - 1;
            var rightArrayLength = array.Length - leftArrayLength;
            var leftArray = new int[leftArrayLength];
            var rightArray = new int[rightArrayLength];
            for (var leftIndex = 0; leftIndex < leftArrayLength; leftIndex++)
            {
                leftArray[leftIndex] = array[leftIndex];
            }  
            
            var middleItem = array[leftArrayLength];
            for (var rightIndex = 0; rightIndex < rightArrayLength; rightIndex ++)
            {
                rightArray[rightIndex] = array[leftArrayLength+rightIndex];
            }
            
            var result = new TreeNode(middleItem) { Child1 = ConvertToTree(leftArray), Child2 =  ConvertToTree(rightArray) };
            return result;
        }
    }
}


// unit tests

using TreeFromArray;

namespace TreeFromArray.Tests
{
    [TestClass]
    public class SolverTests
    {
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void ConvertToTreeNullTest()
        {
             ConvertToTreeTest(null, null);
        }
        
        [TestMethod]
        public void ConvertToTreeEmptyTest()
        {
           ConvertToTreeTest(null, new int[]{});
        }
         
        [TestMethod]
        public void ConvertToTreeSingleTest()
        {
           ConvertToTreeTest(new TreeNode(1), new int[]{1});
        }
         
        [TestMethod]
        public void ConvertToTreeDoubleTest()
        {
           ConvertToTreeTest(new TreeNode(1){Child2=new TreeNode(2)}, new int[]{1,2});
        }
         
        [TestMethod]
        public void ConvertToTreeTripleTest()
        {
           ConvertToTreeTest(new TreeNode(2){Child1=new TreeNode(1), Child2=new TreeNode(3)}, new int[]{1,2,});
        }
    
        private void ConvertToTreeTest(TreeNode expectedNode, int [] inputArray)
        {
            // act
            var result = Solver.ConvertToTree(inputArray);
            
            // assert
            AssertTreeNodeRecursively(expectedNode, result);
        }
        
        private void AssertTreeNodeRecursively(TreeNode expectedNode, TreeNode actualNode)
        {
            if (expectedNode == null)
            {
                Assert.IsNull(actualNode);
            }
            
            else
            {
                Assert.AreEqual(expectedNode?.Value, actualNode?.Value);
                AssertTreeNodeRecursively(expectedNode?.Child1, actualNode?.Child1);
                AssertTreeNodeRecursively(expectedNode?.Child2, actualNode?.Child2);
            }
        }
    }
}