15.09.2017 14:00 EEST

http://collabedit.com/9ypv9

Notes for task:
1) Looking for object oriented design, break down by components, abstraction, etc
2) Design approach for production code
3) Unit-tests are necessary


Convert a number to English representation. 
Ex: Input : 100 
Output : One Hundred.

namespace NumberToWordsConversion
{
    public static class ConvertNumberToWords
    {
        public static string Convert(int number)
        {
            if (number < 0)
            {
                throw new ArgumentOutOfRangeException(nameof(number), "number can't be negative");
            }
            
            if (number == 0)
            {
                return "Zero";
            }
            
            string [] decimalWords= {"Hundred", "Thousand", "Million", "Billion", };
            
            string [] first20Words = {"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten",
            "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen","Sixteen", "Seventeen","Eighteen","Nineteen"};
            
            string [] first100Words = {"Twenty", "Thirty", "Fourty", "Fifty", "Sixty", "Seventy", "Eighty","Ninty"};
            var resultStringBuilder= new StringBuilder();
            var firstNumberMod100 = number % 100;
            if (firstNumberMod100 < 20) 
            {
                result.Append(first20Words[firstNumberMod100]); // one .. nineteen
                number = number / 100;
            }
            else
            {
                result.Append(first100Words [(firstNumberMod100-20)/10]+" "); // twenty ...ninty 
                result.Append(first20Words [number %10]+" "); // twenty one.. twenty nine
                number = number / 100;
            }
            if (number > 0)
            {
                if (number % 10 == 1)
                {
                    result.Insert(0, decimalWords[0]+" "); // hundred + (previous)
                }
                else
                {
                    result.Insert(0, decimalWords[0]+"s "); // hundreds + (previous)
                }
                
                var firstNumberMod100 = number % 100;
                if (firstNumberMod100 < 20) 
                {
                    result.Append(first20Words[firstNumberMod100]); // one .. nineteen
                    number = number / 100;
                }
                else
                {
                    result.Append(first100Words [(firstNumberMod100-20)/10]+" "); // twenty ...ninty 
                    result.Append(first20Words [number %10]+" "); // twenty one.. twenty nine
                    number = number / 100;
                }
            }
        }
    }
}

// tests
using NumberToWordsConversion;

namespace NumberToWordsConversion.Tests
{
    [TestClass]
    public class ConvertNumberToWordsTests
    {
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void ConvertNegative()
        {
            ConvertNumberToWords.Convert(-10);
        }
        
        [TestMethod]
        public void ConvertZero()
        {
            Convert("Zero", 0);
        }
        
        [TestMethod]
        public void Convert13()
        {
            Convert("Thirteen",13);
        }
        
        [TestMethod]
        public void Convert20()
        {
            Convert("Twenty",20);
        }
        
        [TestMethod]
        public void Convert25()
        {
            Convert("Twenty Five",25);
        }
            
        [TestMethod]
        public void Convert125()
        {
            Convert("One Hundred Twenty Five",125);
        }
        
        [TestMethod]
        public void Convert1125()
        {
            Convert("One Thousand One Hundred Twenty Five",1125);
        }
        
        [TestMethod]
        public void Convert1017()
        {
            Convert("One Thousand One Hundred Twenty Five",1125);
        }

        [TestMethod]
        public void Convert11125()
        {
            Convert("Eleven Thousands One Hundred Twenty Five",11125);
        }
        
        private void Convert(string expectedOutput, int input)
        {
            // act
            var result = ConvertNumberToWords.Convert(input);
            
            // assert
            Assert.AreEqual(expectedOutput, result);
        }

    }
}