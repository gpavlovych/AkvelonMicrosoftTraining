31.10.2017 11:00 EEST

http://collabedit.com/v4c94

Notes for task:
1) Looking for object oriented design, break down by components, abstraction, etc
2) Design approach for production code
3) Unit-tests are necessary

Given a sorted array and the number, find the number of sum of 2 numbers from array greater than or equal to the given number

-2, 1,4,6,8,10, sum=6

namespace GreaterSum
{
    public static class Solution
    {
        public static int CountPairsGreaterSum(int [] input, int number)
        {
            if (input == null)
            {
                throw new ArgumentNullException(nameof(input));
            }
            
            var greaterCount = 0;
            var lessCount = 0;
            for (var inputIndex = 0; inputIndex < input.Length - 1; inputIndex++)
            {
                var currentItem = input[inputIndex];
                var nextItem = input[inputIndex+1];
                if (currentItem > nextItem)
                {
                    greaterCount ++;
                }
                
                if (currentItem < nextItem)
                {
                    lessCount ++;
                }
            }
            
            if (greaterCount != 0 && lessCount != 0)
            {
                throw new ArgumentException("input should be sorted!");
            }
            
            var result = 0;
            for (var leftIndex = 0; leftIndex < input.Length-1; leftIndex ++)
            {
               for (var rightIndex = leftIndex+1; rightIndrex < input.Length; rightIndex++)
               {
                   var pairSum = input[leftIndex]+input[rightIndex];
                   if(pairSum >= number)
                   {
                       result++;
                   }
               }
            }
            
            return result;
       }
    }
}

namespace GreaterSumTests
{
    [TestClass]
    public class SolutionTests
    {
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void CountPairsGreaterSumUnsorted()
        {
            CountPairsGreaterSum(0, new int[]{2,1,3}, 0);
        }
        
        [TestMethod]
        public void CountPairsGreaterSumAscending()
        {
            CountPairsGreaterSum(3, new int[]{1,2,3}, 0);
        }
          
        [TestMethod]
        public void CountPairsGreaterSumDescending()
        {
            CountPairsGreaterSum(3, new int[]{3,2,1}, 0);
        }

        [TestMethod]
        public void CountPairsGreaterSumAscending2()
        {
            CountPairsGreaterSum(11, new int[]{-2, 1, 4, 6, 8, 10}, 6);
        }
          
        [TestMethod]
        public void CountPairsGreaterSumDescending2()
        {
            CountPairsGreaterSum(11, new int[]{10,8,6,4,1,-2}, 0);
        }

        private static void CountPairsGreaterSum(int expectedOutput, int [] input, int number)
        {
            // act 
            var result = Solution.CountPairsGreaterSum(input, number);
            
            // assert
            Assert.AreEqual(expectedOutput, result);
        }
    }   
}